💘 Tinder App SQL Analysis

 Project Overview
This project simulates the backend database of a dating application (inspired by Tinder) and dives into real-world SQL queries for user behavior analysis, match interactions, and subscription insights.
The database models all core functionalities of a modern dating app—user profiles, swipes, matches, messages, and subscriptions—and is ideal for practicing complex SQL operations in a realistic scenario.

 Database Schema
The project consists of the following tables:

Table	Description
Users	User profiles with demographics and location
Swipes	Tracks swipe interactions (Like/Dislike) between users
Matches	Contains successful matches between two users
Messages	Stores messages exchanged between matched users
Subscriptions	Subscription details (Free, Plus, Gold, Platinum) for each user

SQL script includes schema creation, data population, and business queries.

🔍 Business Questions Answered
Count total users and fetch user details

1) List all “Like” interactions from the Swipes table.
2) Identify users subscribed to the Gold plan



Identify users subscribed to the Gold plan

Retrieve names of users who matched

Count users under each subscription plan

List users older than 25

Find matches between users from the same city

Calculate the percentage of paid (non-Free) users

Classify swipe interactions as Positive or Negative using CASE

🛠 SQL Techniques Used
INNER JOINs

CASE statements

Aggregation with COUNT, GROUP BY

Subqueries

Data filtering with WHERE and LIKE

Alias naming for clean output

Data Relationships via Foreign Keys

🚀 Key Takeaways
Learn to build and query a normalized, relational database

Simulate real-world logic of a dating platform through SQL

Understand user engagement and business insights through data

Improve SQL confidence using real-time data analysis

